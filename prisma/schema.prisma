// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// SaaS Multi-tenancy model
model Organization {
  id                String        @id @default(cuid())
  name              String
  slug              String        @unique // For subdomain/URL identification
  planType          PlanType      @default(BASIC)
  employeeLimit     Int           @default(50)
  billingStatus     BillingStatus @default(TRIAL)
  subscriptionId    String?       @unique // Stripe subscription ID
  customerId        String?       @unique // Stripe customer ID
  trialEndsAt       DateTime?
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  isActive          Boolean       @default(true)
  settings          Json? // Custom settings per organization
  logoUrl           String? // Added for company logos
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  users       User[]
  locations   Location[]
  clockEvents ClockEvent[]
  timesheets  Timesheet[]
  files       File[] // Added for organization files
  departments Department[]
  schedules   Schedule[]
  teams       Team[]

  @@map("organizations")
}

// Core application models
model User {
  id             String    @id @default(cuid())
  organizationId String
  name           String?
  email          String    @unique // Global email uniqueness
  emailVerified  DateTime?
  image          String?
  password       String?
  phoneNumber    String? // Phone number for notifications and 2FA
  role           UserRole  @default(EMPLOYEE)
  isActive       Boolean   @default(true)
  locationId     String?
  departmentId   String? // Department/group assignment
  employeeId     String? // Custom employee ID within organization
  avatarUrl      String? // Added for profile images
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  location          Location?    @relation(fields: [locationId], references: [id])
  department        Department?  @relation("EmployeeDepartment", fields: [departmentId], references: [id])
  managedDepts      Department[] @relation("DepartmentManager")
  accounts          Account[]
  sessions          Session[]
  clockEvents       ClockEvent[]
  timesheets        Timesheet[]
  approvals         Timesheet[]  @relation("ApprovedBy")
  uploadedFiles     File[]       @relation("UploadedBy") // Added for file uploads
  assignedSchedules Schedule[]   @relation("ScheduleAssignee")
  createdSchedules  Schedule[]   @relation("ScheduleCreator")
  approvedSchedules Schedule[]   @relation("ScheduleApprover")
  managedTeams      Team[]       @relation("TeamManager")
  teamMemberships   TeamMember[]

  @@map("users")
}

model Location {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  address        String
  latitude       Float
  longitude      Float
  radius         Int      @default(10) // meters
  qrCode         String?  @unique
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  users        User[]
  clockEvents  ClockEvent[]
  schedules    Schedule[]

  @@map("locations")
}

model ClockEvent {
  id             String      @id @default(cuid())
  organizationId String
  userId         String
  type           ClockType
  timestamp      DateTime    @default(now())
  method         ClockMethod @default(MANUAL)
  latitude       Float?
  longitude      Float?
  notes          String?
  locationId     String?

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])
  location     Location?    @relation(fields: [locationId], references: [id])

  @@map("clock_events")
}

model Timesheet {
  id             String          @id @default(cuid())
  organizationId String
  userId         String
  startDate      DateTime
  endDate        DateTime
  totalHours     Float           @default(0)
  regularHours   Float           @default(0)
  overtimeHours  Float           @default(0)
  breakHours     Float           @default(0)
  status         TimesheetStatus @default(PENDING)
  approvedBy     String?
  approvedAt     DateTime?
  submittedAt    DateTime?
  notes          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])
  approver     User?        @relation("ApprovedBy", fields: [approvedBy], references: [id])

  @@map("timesheets")
}

// New File model for managing uploads
model File {
  id           String   @id @default(cuid())
  fileName     String // Generated unique filename
  originalName String // Original filename from user
  filePath     String // Public URL path to file
  fileType     FileType // Type of file (logo, avatar, document)
  fileSize     Int // File size in bytes
  mimeType     String? // MIME type
  description  String? // Optional description

  // Relationships
  uploadedById   String
  uploadedBy     User         @relation("UploadedBy", fields: [uploadedById], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}

// Department/Group model for organizing employees
model Department {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  description    String?
  color          String? // For UI visualization (#hex color)
  managerId      String? // Optional department manager
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  manager      User?        @relation("DepartmentManager", fields: [managerId], references: [id])
  employees    User[]       @relation("EmployeeDepartment")
  schedules    Schedule[]

  @@map("departments")
}

// Team model for grouping employees for easier schedule assignment
model Team {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  description    String?
  color          String? // For UI visualization (#hex color)
  managerId      String? // Optional team manager
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  manager      User?        @relation("TeamManager", fields: [managerId], references: [id])
  members      TeamMember[]
  schedules    Schedule[]

  @@map("teams")
}

// Junction table for team membership
model TeamMember {
  id     String @id @default(cuid())
  teamId String
  userId String

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

// Schedule model for managing employee work schedules
model Schedule {
  id             String         @id @default(cuid())
  organizationId String
  title          String
  description    String?
  scheduleType   ScheduleType   @default(SHIFT)
  status         ScheduleStatus @default(DRAFT)

  // Time settings
  startDate     DateTime
  endDate       DateTime? // Null for ongoing schedules
  startTime     String // Format: "HH:MM" (24-hour)
  endTime       String // Format: "HH:MM" (24-hour)
  breakDuration Int? // Break duration in minutes

  // Recurrence settings
  isRecurring    Boolean            @default(false)
  recurrence     RecurrencePattern?
  recurrenceDays String? // JSON array of days for weekly recurrence ["MON", "TUE", "WED"]
  recurrenceEnd  DateTime? // When recurrence ends

  // Assignment
  userId       String? // Individual employee assignment
  departmentId String? // Department-wide assignment
  locationId   String? // Location requirement

  // Approval workflow
  createdBy  String
  approvedBy String?
  approvedAt DateTime?

  // Metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User?        @relation("ScheduleAssignee", fields: [userId], references: [id])
  department   Department?  @relation(fields: [departmentId], references: [id])
  location     Location?    @relation(fields: [locationId], references: [id])
  creator      User         @relation("ScheduleCreator", fields: [createdBy], references: [id])
  approver     User?        @relation("ScheduleApprover", fields: [approvedBy], references: [id])
  Team         Team?        @relation(fields: [teamId], references: [id])
  teamId       String?

  @@map("schedules")
}

// Enums
enum UserRole {
  EMPLOYEE
  MANAGER
  ADMIN
  SUPER_ADMIN // For platform administrators
}

enum ClockType {
  CLOCK_IN
  CLOCK_OUT
  BREAK_START
  BREAK_END
}

enum ClockMethod {
  MANUAL
  QR_CODE
  GEOFENCE
}

enum TimesheetStatus {
  PENDING
  APPROVED
  REJECTED
  DRAFT
}

enum PlanType {
  BASIC // 50 employees - $10/month
  PROFESSIONAL // 100 employees - $20/month
  ENTERPRISE // 100+ employees - $65/month
}

enum BillingStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  SUSPENDED
}

enum FileType {
  COMPANY_LOGO
  EMPLOYEE_AVATAR
  DOCUMENT
  ONBOARDING_DOCUMENT
  CONTRACT
  POLICY
  HANDBOOK
}

enum ScheduleType {
  SHIFT // Regular work shift
  MEETING // Meeting or appointment
  TRAINING // Training session
  EVENT // Company event
  OVERTIME // Overtime work
  ON_CALL // On-call duty
}

enum ScheduleStatus {
  DRAFT // Being created/edited
  PENDING // Awaiting approval
  APPROVED // Approved and active
  REJECTED // Rejected by manager
  CANCELLED // Cancelled schedule
  COMPLETED // Past schedule that was completed
}

enum RecurrencePattern {
  DAILY // Every day
  WEEKLY // Every week
  BIWEEKLY // Every two weeks
  MONTHLY // Every month
  CUSTOM // Custom pattern
}
